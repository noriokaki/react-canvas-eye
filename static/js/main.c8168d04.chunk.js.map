{"version":3,"sources":["serviceWorker.ts","WatchingYou.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","style","border","backgroundColor","WatchingYou","prop","mouseMoveEvent","event","convertCanvasPos","x","y","draw","getContext","clearRect","canvasRef","current","width","height","eyeCenter","forEach","p","drawEyeOuter","drawEyeBall","eyeHeight","eyeWidth","irisR","React","this","document","addEventListener","removeEventListener","rect","getBoundingClientRect","left","top","center","ctx","beginPath","ellipse","Math","PI","stroke","angle","atan2","ellipsePoint","cos","sin","sqrt","arc","fill","id","ref","onMouseMove","e","nativeEvent","offsetX","offsetY","ReactDOM","render","createElement","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c8168d04.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = (): void => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = (): void => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister(): void {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as React from \"react\";\n\nconst style = {\n    border: \"1px solid gray\",\n    backgroundColor: \"white\",\n};\n\ntype Props = {};\ntype State = {\n    eyeHeight: number;\n    eyeWidth: number;\n    /** 虹彩半径 */\n    irisR: number;\n    eyeCenter: Vector2[];\n};\n\nexport default class WatchingYou extends React.Component<Props, State> {\n    constructor(prop: Readonly<Props>) {\n        super(prop);\n        this.state = {\n            eyeHeight: 75,\n            eyeWidth: 50,\n            irisR: 15,\n            eyeCenter: [{ x: 50, y: 75 }, { x: 160, y: 75 }],\n        };\n        this.canvasRef = React.createRef<HTMLCanvasElement>();\n    }\n    public componentDidMount(): void {\n        if (!this.getContext()) {\n            return;\n        }\n        document.addEventListener(\"mousemove\", this.mouseMoveEvent);\n    }\n\n    private readonly mouseMoveEvent = (event: MouseEvent): void => {\n        const { x, y } = this.convertCanvasPos(event.x, event.y);\n        this.draw(x, y);\n    };\n\n    public componentWillUnmount(): void {\n        document.removeEventListener(\"mousemove\", this.mouseMoveEvent);\n    }\n    private convertCanvasPos(x: number, y: number): { x: number; y: number } {\n        const rect = this.canvasRef!.current!.getBoundingClientRect();\n        return { x: x - rect.left, y: y - rect.top };\n    }\n\n    private readonly draw = (x: number, y: number): void => {\n        const ctx = this.getContext();\n        ctx.clearRect(0, 0, this.canvasRef!.current!.width, this.canvasRef!.current!.height);\n        this.state.eyeCenter.forEach(p => {\n            this.drawEyeOuter(p);\n            this.drawEyeBall(x, y, p);\n        });\n    };\n\n    private drawEyeOuter(center: { x: number; y: number }): void {\n        const ctx = this.getContext();\n\n        ctx.beginPath();\n        ctx.ellipse(center.x, center.y, this.state.eyeWidth, this.state.eyeHeight, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n    }\n\n    private drawEyeBall(x: number, y: number, center: { x: number; y: number }): void {\n        const ctx = this.getContext();\n        ctx.beginPath();\n        const angle = Math.PI / 2 - Math.atan2(x - center.x, y - center.y);\n\n        const ellipsePoint: Vector2 = {\n            x: (this.state.eyeWidth - this.state.irisR * 2) * Math.cos(angle) + center.x,\n            y: (this.state.eyeHeight - this.state.irisR * 2) * Math.sin(angle) + center.y,\n        };\n\n        // 楕円より内側\n        if (\n            Math.sqrt((x - center.x) ** 2 + (y - center.y) ** 2) <\n            Math.sqrt((ellipsePoint.x - center.x) ** 2 + (ellipsePoint.y - center.y) ** 2)\n        ) {\n            ctx.arc(x, y, this.state.irisR * 2, 0, 2 * Math.PI);\n            ctx.fill();\n            return;\n        }\n\n        ctx.arc(ellipsePoint.x, ellipsePoint.y, this.state.irisR * 2, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n\n    private readonly canvasRef: React.RefObject<HTMLCanvasElement> | null = null;\n\n    private readonly getContext = (): CanvasRenderingContext2D => this.canvasRef!.current!.getContext(\"2d\")!;\n\n    public render(): React.ReactElement {\n        return (\n            <canvas\n                id=\"EyeCanvas\"\n                width=\"210fpx\"\n                height=\"150px\"\n                ref={this.canvasRef}\n                onMouseMove={(e): void => this.draw(e.nativeEvent.offsetX, e.nativeEvent.offsetY)}\n                style={style}\n            ></canvas>\n        );\n    }\n}\n\ntype Vector2 = { x: number; y: number };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport WatchingYou from \"./WatchingYou\";\n\nReactDOM.render(React.createElement(WatchingYou), document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}